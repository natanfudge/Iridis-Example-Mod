plugins {
    id("fabric-loom") /*version "0.4-SNAPSHOT"*/
}

apply plugin: FebbGradle

febb {
    minecraftVersion = minecraft_version
    yarnBuild = yarn_build
    febbBuild = iridis_build
}

group = rootProject.group
version = rootProject.version
archivesBaseName = mod_id


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}


repositories {
    maven { url = "https://dl.bintray.com/febb/maven" }
}

//configurations.create("commonCompileOnly")

sourceSets {
    def common = create("commonMain") {
//        compileClasspath += configurations.commonCompileOnly
    }
    create("fabricMain") {
        compileClasspath += main.compileClasspath + common.output + common.compileClasspath
//        compileClasspath += commonMain.compileClasspath + common.output
        runtimeClasspath += main.runtimeClasspath + common.output
    }

}
dependencies {

    minecraft("com.mojang:minecraft:$minecraft_version")
    mappings("net.fabricmc:yarn:$minecraft_version+build.$yarn_build:v2")
    modCompile("net.fabricmc:fabric-loader:$loader_version")

    modImplementation("net.fabricmc.fabric-api:fabric-api:$fabric_version")

    commonMainCompileOnly("io.github.febb:api:$minecraft_version+$yarn_build-$iridis_build:api")
    commonMainCompileOnly("io.github.febb:api:$minecraft_version+$yarn_build-$iridis_build:api-sources")
    fabricMainCompileOnly("io.github.febb:api:$minecraft_version+$yarn_build-$iridis_build:api")
    fabricMainCompileOnly("io.github.febb:api:$minecraft_version+$yarn_build-$iridis_build:api-sources")
    modRuntime("io.github.febb:api:$minecraft_version+$yarn_build-$iridis_build:impl-fabric")
}




tasks.jar {
    from(sourceSets["fabricMain"].output)
    from(sourceSets["commonMain"].output)
}

tasks.findByName("processFabricMainResources").configure {
    def templateProperties = [
            "version", "mod_id", "display_name", "description", "issue_tracker", "home_page", "logo", "sources", "license"
    ].collectEntries { [it, project.property(it)] }


    inputs.properties(templateProperties)

    // replace stuff in the manifest, nothing else
    from(sourceSets["fabricMain"].resources.srcDirs) {
        include("fabric.mod.json")

        // replace version and mcversion
        expand(templateProperties)
    }

    // copy everything else except the manifest
    from(sourceSets["fabricMain"].resources.srcDirs) {
        exclude("fabric.mod.json")
    }

    from(sourceSets["commonMain"].resources.srcDirs)

}
